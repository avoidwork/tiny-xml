{"version":3,"sources":["tiny-xml.js"],"names":["Object","keys","forEach","call","parseFromString","replace","test","xml","Document","serializeToString","isNaN","Array","DOMParser","require","XMLSerializer","parse","serialize","valid","getElementsByTagName","length","version","exports","define","amd","module","window","global"],"mappings":"AASC,YAAkB,CAOlB,eAA2B,GAA3B,CAAsC,CACrCA,OAAOC,IAAP,IAAiBC,OAAjB,CAAyB,KAAK,CAC7B,EAAGC,IAAH,GAAa,IAAb,GACA,CAFD,CAGA,CAED,aAAqB,CACpB,MAAO,SAAgBC,eAAhB,GAAqC,UAArC,CACP,CAED,WAAe,EAAM,EAArB,GAAgC,CAC/B,KAAM,GAAO,EAAIC,OAAJ,CAAY,KAAZ,CAAmB,EAAnB,CAAb,CAEA,GAAI,GAAQ,EAAZ,CACC,EAAM,EADP,CAQA,MALa,EAAT,IAKJ,GAJC,EAAS,IAAD,CAAS,GAIlB,CAHC,EAAO,KAAD,CAAU,GAGjB,EAAO,GAAS,EAAMC,IAAN,IAAoB,cAAsB,KAA1C,EAAT,GACP,CAED,aAAyB,EAAM,KAA/B,CAAsC,IAAtC,CAAmD,IAAnD,CAA+D,CAC9D,GAAI,GAAI,EAAQ,IAAD,CAAQ,GAAf,CAAoB,EAA5B,CACC,GADD,CA+BA,MA5Ba,KAAT,MAAiB,EAAKC,GA4B1B,GA3BC,EAAO,EAAKA,GA2Bb,EAxBwB,WAApB,QAAOC,SAAP,EAAmC,YAAgBA,SAwBvD,GAvBC,EAAO,QAAoBC,iBAApB,GAuBR,EApBI,EAAsBH,IAAtB,CAA2B,QAA3B,CAoBJ,CAnBC,GAAK,EAAKI,WAAmB,MAAxB,GAmBN,CAlBoB,IAAT,MAAiB,UAkB5B,CAjBC,GAAK,MAiBN,CAhBW,YAAgBC,MAgB3B,CAfC,EAAKT,OAAL,CAAa,WAAa,CACzB,GAAK,IAAa,MAAb,EAAqB,EAAsBI,IAAtB,CAA2B,QAA3B,CAArB,IACL,CAFD,CAeD,CAZW,YAAgBN,OAY3B,EAXC,IAAc,aAAgB,CAC7B,GAAK,EAAsBM,IAAtB,CAA2B,QAA3B,EAAuC,MAAvC,CAAoD,WACzD,CAFD,CAWD,CANA,GAAK,EAAO,OAAa,GAApB,CAA0B,EAM/B,KAHC,EAAI,6CAGL,GACA,CAhEiB,KACZ,GAAY,EAAOM,SAAP,EAAoBC,QAAQ,QAAR,EAAkBD,SADtC,CAEZ,EAAgB,EAAOE,aAAP,EAAwBD,QAAQ,QAAR,EAAkBC,aAF9C,CAIZ,EAAQ,6BAJI,CAKjB,EAAwB,uBALP,CAsEZ,EAAM,CACXC,OADW,CAEXC,WAFW,CAGXC,MAPD,WAAqB,CACpB,MAAiE,EAA1D,QAAWC,oBAAX,CAAgC,aAAhC,EAA+CC,MACtD,CAEW,CAIXC,QAAS,aAJE,CAtEM,CA8EK,WAAnB,QAAOC,QA9EO,CAgFW,UAAlB,QAAOC,OAAP,EAA+C,IAAK,EAApB,UAAOC,GAhFhC,CAiFjBD,OAAO,UAAY,CAClB,QACA,CAFD,CAjFiB,CAqFjB,EAAOf,GAAP,EArFiB,CA+EjBiB,OAAOH,OAAP,EAQD,CAvFA,EAuFmB,WAAlB,QAAOI,OAAP,CAAyCC,MAAzC,CAAgCD,MAvFjC,C","file":"unknown","sourcesContent":["/**\r\n * Tiny XML utility for Client and Server\r\n *\r\n * @author Jason Mulligan <jason.mulligan@avoidwork.com>\r\n * @copyright 2018\r\n * @license BSD-3-Clause\r\n * @link http://avoidwork.github.io/tiny-xml\r\n * @version 2.0.0\r\n */\r\n(function (global) {\r\n\tconst DOMParser = global.DOMParser || require(\"xmldom\").DOMParser;\r\n\tconst XMLSerializer = global.XMLSerializer || require(\"xmldom\").XMLSerializer;\r\n\r\n\tconst cdata = /\\&|<|>|\\\"|\\'|\\t|\\r|\\n|\\@|\\$/,\r\n\t\tboolean_number_string = /boolean|number|string/;\r\n\r\n\tfunction iterate (obj, fn, ctx = obj) {\r\n\t\tObject.keys(obj).forEach(i => {\r\n\t\t\tfn.call(ctx, obj[i], i);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction parse (arg) {\r\n\t\treturn new DOMParser().parseFromString(arg, \"text/xml\");\r\n\t}\r\n\r\n\tfunction node (arg = \"\", value) {\r\n\t\tconst name = arg.replace(/\\s/g, \"\");\r\n\r\n\t\tlet start = \"\",\r\n\t\t\tend = \"\";\r\n\r\n\t\tif (name !== \"\") {\r\n\t\t\tstart = `<${name}>`;\r\n\t\t\tend = `</${name}>`;\r\n\t\t}\r\n\r\n\t\treturn start + (cdata.test(value) ? \"<![CDATA[\" + value + \"]]>\" : value) + end;\r\n\t}\r\n\r\n\tfunction serialize (arg, key = \"xml\", wrap = true, top = true) {\r\n\t\tlet x = wrap ? `<${key}>` : \"\",\r\n\t\t\tlarg = arg;\r\n\r\n\t\tif (larg !== null && larg.xml) {\r\n\t\t\tlarg = larg.xml;\r\n\t\t}\r\n\r\n\t\tif (typeof Document !== \"undefined\" && larg instanceof Document) {\r\n\t\t\tlarg = new XMLSerializer().serializeToString(larg);\r\n\t\t}\r\n\r\n\t\tif (boolean_number_string.test(typeof larg)) {\r\n\t\t\tx += node(isNaN(key) ? key : \"item\", larg);\r\n\t\t} else if (larg === null || larg === undefined) {\r\n\t\t\tx += \"null\";\r\n\t\t} else if (larg instanceof Array) {\r\n\t\t\tlarg.forEach(function (v) {\r\n\t\t\t\tx += serialize(v, \"item\", boolean_number_string.test(typeof v) ? false : true, false);\r\n\t\t\t});\r\n\t\t} else if (larg instanceof Object) {\r\n\t\t\titerate(larg, function (v, k) {\r\n\t\t\t\tx += boolean_number_string.test(typeof v) ? node(k, v) : serialize(v, k, top, false);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tx += wrap ? \"</\" + key + \">\" : \"\";\r\n\r\n\t\tif (top) {\r\n\t\t\tx = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF8\\\"?>\" + x;\r\n\t\t}\r\n\r\n\t\treturn x;\r\n\t}\r\n\r\n\tfunction valid (arg) {\r\n\t\treturn parse(arg).getElementsByTagName(\"parsererror\").length === 0;\r\n\t}\r\n\r\n\tconst xml = {\r\n\t\tparse: parse,\r\n\t\tserialize: serialize,\r\n\t\tvalid: valid,\r\n\t\tversion: \"{{VERSION}}\"\r\n\t};\r\n\r\n\t// Node, AMD & window supported\r\n\tif (typeof exports !== \"undefined\") {\r\n\t\tmodule.exports = xml;\r\n\t} else if (typeof define === \"function\" && define.amd !== void 0) {\r\n\t\tdefine(function () {\r\n\t\t\treturn xml;\r\n\t\t});\r\n\t} else {\r\n\t\tglobal.xml = xml;\r\n\t}\r\n}(typeof window !== \"undefined\" ? window : global));\r\n"]}