/*
 2018 Jason Mulligan <jason.mulligan@avoidwork.com>
 @version 2.0.0
*/
"use strict";(function(a){function b(a,b,c=a){Object.keys(a).forEach((d)=>{b.call(c,a[d],d)})}function c(a){return new f().parseFromString(a,"text/xml")}function d(a="",b){const c=a.replace(/\s/g,"");let d="",e="";return""!==c&&(d=`<${c}>`,e=`</${c}>`),d+(h.test(b)?"<![CDATA["+b+"]]>":b)+e}function e(a,c="xml",f=!0,h=!0){let j=f?`<${c}>`:"",k=a;return null!==k&&k.xml&&(k=k.xml),"undefined"!=typeof Document&&k instanceof Document&&(k=new g().serializeToString(k)),i.test(typeof k)?j+=d(isNaN(c)?c:"item",k):null===k||void 0===k?j+="null":k instanceof Array?k.forEach(function(a){j+=e(a,"item",!i.test(typeof a),!1)}):k instanceof Object&&b(k,function(a,b){j+=i.test(typeof a)?d(b,a):e(a,b,h,!1)}),j+=f?"</"+c+">":"",h&&(j="<?xml version=\"1.0\" encoding=\"UTF8\"?>"+j),j}const f=a.DOMParser||require("xmldom").DOMParser,g=a.XMLSerializer||require("xmldom").XMLSerializer,h=/\&|<|>|\"|\'|\t|\r|\n|\@|\$/,i=/boolean|number|string/,j={parse:c,serialize:e,valid:function(a){return 0===c(a).getElementsByTagName("parsererror").length},version:"{{VERSION}}"};"undefined"==typeof exports?"function"==typeof define&&void 0!==define.amd?define(function(){return j}):a.xml=j:module.exports=j})("undefined"==typeof window?global:window);
//# sourceMappingURL=tiny-xml.min.js.map